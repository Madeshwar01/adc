clc;
clear all;
close all;
Fs = 50; % Sampling frequency
T = 1; % Duration of the signal in seconds
N = Fs * T; % Total number of samples
M = 8; % QAM modulation order (change as needed)
% Generate a random message signal
message_signal = randi([0, M-1], 1, N);
% QAM Modulation
modulated_signal = qammod(message_signal, M);
% QAM Demodulation
demodulated_signal = qamdemod(modulated_signal, M);
% Plot the message signal
subplot(3,1,1);
stem(message_signal, 'r', 'linewidth', 1.5);
title('Message Signal');
xlabel('Sample Index');
ylabel('Amplitude');
% Plot the modulated signal
subplot(3,1,2);
plot(real(modulated_signal), 'b', 'linewidth', 1.5);
hold on;
plot(imag(modulated_signal), 'g', 'linewidth', 1.5);
title('Modulated Signal');
xlabel('Sample Index');
ylabel('Amplitude');
legend('Real', 'Imaginary');
% Plot the demodulated signal
subplot(3,1,3);
stem(demodulated_signal, 'm', 'linewidth', 1.5);
title('Demodulated Signal');
xlabel('Sample Index');
ylabel('Amplitude');
% Adjust plot spacing
sgtitle('QAM Modulation and Demodulation ');

% QAM Parameters
M = 16; % QAM modulation order (e.g., 16-QAM)
EbNo_dB = 0:1:20; % Eb/No range in dB
numBits = 1e5; % Number of bits to transmit
% Generate random binary data
data = randi([0, 1], 1, numBits);
% Modulation
modulatedData = qammod(data, M);
% Simulation loop over various Eb/No values
ber = zeros(1, length(EbNo_dB));
for i = 1:length(EbNo_dB)
% Add AWGN noise
EbNo = 10^(EbNo_dB(i)/10); % Convert Eb/No from dB to linear scale
noiseVar = 1 / (2 * EbNo); % Noise variance for each dimension
noise = sqrt(noiseVar) * (randn(1, length(modulatedData)) + 1i * randn(1,length(modulatedData)));
receivedData = modulatedData + noise;
% Demodulation
demodulatedData = qamdemod(receivedData, M);
% Compute and store BER
ber(i) = sum(demodulatedData ~= data) / numBits;
end
% Plot BER vs. Eb/No
figure;
semilogy(EbNo_dB, ber, '-o');
grid on;
title('BER vs. Eb/No for QAM');
xlabel('Eb/No (dB)');
ylabel('Bit Error Rate (BER)');