PCM INPUT 4,40



clc;
close all;
clear all;
n=input('Enter n value for n-bit PCM system : ');
n1=input('Enter number of samples in a period : ');
L=2^n;
x=0:2*pi/n1:4*pi; % n1 nuber of samples have tobe selected
s=8*sin(x);
subplot(3,1,1);
plot(s);
title('Analog Signal');
ylabel('Amplitude--->');
xlabel('Time--->');
subplot(3,1,2);
stem(s);grid on; title('Sampled Sinal'); ylabel('Amplitude--->'); xlabel('Time--->');
% Quantization Process
vmax=8;
vmin=-vmax;
del=(vmax-vmin)/L;
part=vmin:del:vmax; % level are between vmin and vmax with difference of del
code=vmin-(del/2):del:vmax+(del/2); % Contaion Quantized valuses
[ind,q]=quantiz(s,part,code); % Quantization process
% ind contain index number and q contain quantized values
l1=length(ind);
l2=length(q);
for i=1:l1
if(ind(i)~=0) % To make index as binary decimal so started from 0 to N
ind(i)=ind(i)-1;
end
i=i+1;
end
for i=1:l2
if(q(i)==vmin-(del/2)) % To make quantize value inbetween the levels
q(i)=vmin+(del/2);
end
end
subplot(3,1,3);
stem(q);grid on; % Display the Quantize values
title('Quantized Signal');
ylabel('Amplitude--->');
xlabel('Time--->');
% Encoding Process
figure
code=de2bi(ind,'left-msb'); % Cnvert the decimal to binary
k=1;
for i=1:l1
for j=1:n
    coded(k)=code(i,j); % convert code matrix to a coded row vector
    j=j+1;
    k=k+1;
end
i=i+1;
end
subplot(3,1,2); grid on;
stairs(coded); % Display the encoded signal
axis([0 100 -2 3]); title('Encoded Signal');
ylabel('Amplitude');
subplot(3,1,1);
stem(q-s);axis([0 110 -1 1]);
title('Quantization Error');
xlabel('Time');
ylabel('Error');
% Demodulation Of PCM signal
qunt=reshape(coded,n,length(coded)/n);
index=bi2de(qunt','left-msb'); % Getback the index in decimal form
q=del*index+vmin+(del/2); % getback Quantized values
subplot(3,1,3); grid on;
plot(q);
% Plot Demodulated signal
title('Demodulated Signal');
ylabel('Amplitude--->');
xlabel('Time--->');
% Define the original continuous signal
fs = 1000; % Sampling frequency (Hz)
t = 0:1/fs:1-1/fs; % Time vector
frequency = 10; % Frequency of the original signal (Hz)
original_signal = sin(2*pi*frequency*t);
% Create an array of different numbers of bits for quantization
num_bits_values = [1, 3, 4, 8, 12, 16, 20, 25];
% Initialize an array to store SQNR values
sqnr_values = zeros(size(num_bits_values));
% Iterate over different numbers of bits
for i = 1:length(num_bits_values)
num_bits = num_bits_values(i);
quantization_levels = 2^num_bits;
quantization_step = (max(original_signal) - min(original_signal)) / quantization_levels;
quantized_signal = round((original_signal - min(original_signal)) / quantization_step) * quantization_step + min(original_signal);
% Calculate the Signal-to-Quantization Noise Ratio (SQNR)
signal_power = mean(original_signal.^2); % Signal power
quantization_noise = original_signal - quantized_signal; % Quantization noise
quantization_noise_power = mean(quantization_noise.^2); % Quantization noise power
sqnr_values(i) = 10 * log10(signal_power / quantization_noise_power); % SQNR in dB
end
% Plot the SQNR values for various numbers of bits
figure;
plot(num_bits_values, sqnr_values, '-o', 'LineWidth', 2);
title('SQNR vs. Number of Bits for Quantization');
xlabel('Number of Bits');
ylabel('SQNR (dB)');
grid on;